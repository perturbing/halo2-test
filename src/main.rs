#![allow(unused_variables)]
#![allow(unused_imports)]
#![allow(dead_code)]
use core::num;
use std::collections::BTreeMap;
use std::marker::PhantomData;
use std::iter;

use halo2_proofs::halo2curves::bn256::G1;
use halo2_proofs::halo2curves::group::{Curve, Group};
use halo2_proofs::plonk::{Advice, vanishing, Circuit, Column, ConstraintSystem, create_proof, Error, Fixed, keygen_pk, keygen_vk, verify_proof, Selector};
use halo2_proofs::halo2curves::bls12_381::{Bls12, G1Affine, Scalar, G1Projective, MillerLoopResult};
use halo2_proofs::halo2curves::ff::Field;
use halo2_proofs::halo2curves::ff::PrimeField;
use halo2_proofs::circuit::{AssignedCell, Layouter, SimpleFloorPlanner, Value, Chip, Region};
use halo2_proofs::dev::MockProver;
use halo2_proofs::poly::commitment::{Verifier, Blind, self};
use halo2_proofs::poly::kzg::msm::MSMKZG;
use halo2_proofs::poly::kzg::strategy::{SingleStrategy, GuardKZG};
use halo2_proofs::poly::kzg::multiopen::CommitmentData;
use halo2_proofs::poly::kzg::commitment::{KZGCommitmentScheme, ParamsKZG};
use halo2_proofs::poly::kzg::multiopen::{ProverGWC, VerifierGWC};
use halo2_proofs::poly::{Rotation, self};
use halo2_proofs::poly::query::MinimalVerifierQuery;
use halo2_proofs::poly::query::Query;
use halo2_proofs::transcript::{Blake2bRead, Blake2bWrite, Challenge255, TranscriptReadBuffer, TranscriptWriterBuffer, TranscriptRead};
use halo2_proofs::transcript::Transcript;
use halo2_proofs::poly::commitment::Params;
use halo2_proofs::arithmetic::{CurveAffine, powers};
use rand::{Rng, SeedableRng};
use halo2_proofs::poly::query::CommitmentReference;
use rand::rngs::StdRng;
use halo2_proofs::poly::commitment::MSM;

trait NumericInstructions<F: Field>: Chip<F> {
    /// Variable representing a number.
    type Num;

    /// Loads a number into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> Result<Self::Num, Error>;

    /// Loads a number into the circuit as a fixed constant.
    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> Result<Self::Num, Error>;

    /// Returns `c = a * b`.
    fn mul(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error>;
}

/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct FieldChip<F: Field> {
    config: FieldConfig,
    _marker: PhantomData<F>,
}

/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
struct FieldConfig {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>; 2],

    // We need a selector to enable the multiplication gate, so that we aren't placing
    // any constraints on cells where `NumericInstructions::mul` is not being used.
    // This is important when building larger circuits, where columns are used by
    // multiple sets of instructions.
    s_mul: Selector,
}

impl<F: Field> FieldChip<F> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>; 2],
        constant: Column<Fixed>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_constant(constant);
        for column in &advice {
            meta.enable_equality(*column);
        }
        let s_mul = meta.selector();

        // Define our multiplication gate!
        meta.create_gate("mul", |meta| {
            // To implement multiplication, we need three advice cells and a selector
            // cell. We arrange them like so:
            //
            // | a0  | a1  | s_mul |
            // |-----|-----|-------|
            // | lhs | rhs | s_mul |
            // | out |     |       |
            //
            // Gates may refer to any relative offsets we want, but each distinct
            // offset adds a cost to the proof. The most common offsets are 0 (the
            // current row), 1 (the next row), and -1 (the previous row), for which
            // `Rotation` has specific constructors.
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let s_mul = meta.query_selector(s_mul);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            // has the following properties:
            // - When s_mul = 0, any value is allowed in lhs, rhs, and out.
            // - When s_mul != 0, this constrains lhs * rhs = out.
            vec![s_mul * (lhs * rhs - out)]
        });

        FieldConfig { advice, s_mul }
    }
}

impl<F: Field> Chip<F> for FieldChip<F> {
    type Config = FieldConfig;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}

/// A variable representing a number.
#[derive(Clone)]
struct Number<F: Field>(AssignedCell<F, F>);

impl<F: Field> NumericInstructions<F> for FieldChip<F> {
    type Num = Number<F>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Value<F>,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(|| "private input", config.advice[0], 0, || value)
                    .map(Number)
            },
        )
    }

    fn load_constant(
        &self,
        mut layouter: impl Layouter<F>,
        constant: F,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load constant",
            |mut region| {
                region
                    .assign_advice_from_constant(|| "constant value", config.advice[0], 0, constant)
                    .map(Number)
            },
        )
    }

    fn mul(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "mul",
            |mut region: Region<'_, F>| {
                // We only want to use a single multiplication gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_mul.enable(&mut region, 0)?;

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                a.0.copy_advice(|| "lhs", &mut region, config.advice[0], 0)?;
                b.0.copy_advice(|| "rhs", &mut region, config.advice[1], 0)?;

                // Now we can assign the multiplication result, which is to be assigned
                // into the output position.
                let value = a.0.value().copied() * b.0.value();

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                region
                    .assign_advice(|| "lhs * rhs", config.advice[0], 1, || value)
                    .map(Number)
            },
        )
    }
}

/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Default)]
struct MyCircuit<F: Field> {
    constant: F,
    a: Value<F>,
    b: Value<F>,
    c: Value<F>,
}

impl<F: Field> Circuit<F> for MyCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = FieldConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FieldChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // Create a fixed column to load constants.
        let constant = meta.fixed_column();

        FieldChip::configure(meta, advice, constant)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let field_chip = FieldChip::<F>::construct(config);

        // Load our private values into the circuit.
        let a = field_chip.load_private(layouter.namespace(|| "load a"), self.a)?;
        let b = field_chip.load_private(layouter.namespace(|| "load b"), self.b)?;
        let c = field_chip.load_private(layouter.namespace(|| "load c"), self.c)?;

        // Load the constant factor into the circuit.
        let constant =
            field_chip.load_constant(layouter.namespace(|| "load constant"), self.constant)?;

        // We only have access to plain multiplication.
        // We could implement our circuit as:
        //     asq  = a*a
        //     bsq  = b*b
        //     absq = asq*bsq
        //     c    = constant*asq*bsq
        //
        // but it's more efficient to implement it as:
        //     ab   = a*b
        //     absq = ab^2
        //     c    = constant*absq
        let ab = field_chip.mul(layouter.namespace(|| "a * b"), a, b)?;
        let absq = field_chip.mul(layouter.namespace(|| "ab * ab"), ab.clone(), ab)?;
        let c_out = field_chip.mul(layouter.namespace(|| "constant * absq"), constant, absq)?;

        layouter.assign_region(
            || "Assert equality",
            |mut region| region.constrain_equal(c_out.0.cell(), c.0.cell()),
        )
    }
}

fn main() {
    // The number of rows in our circuit cannot exceed 2^k. Since our example
    // circuit is very small, we can pick a very small value here.
    let k = 4;

    // Prepare the private and public inputs to the circuit!
    let constant = Scalar::from(7);
    let a = Scalar::from(2);
    let b = Scalar::from(3);
    let c = constant * a.square() * b.square();

    // Instantiate the circuit with the private inputs.
    let circuit = MyCircuit {
        constant,
        a: Value::known(a),
        b: Value::known(b),
        c: Value::known(c),
    };
    
    let seed = [0u8; 32];  // Choose a fixed seed for testing
    let mut rng: StdRng = SeedableRng::from_seed(seed);

    // Given the correct public input, our circuit will verify.
    let params: ParamsKZG<Bls12> = ParamsKZG::setup(k, &mut rng);
    let vk = keygen_vk(&params, &circuit).expect("keygen_vk should not fail");
    let pk = keygen_pk(&params, vk, &circuit).expect("keygen_pk should not fail");

    let mut transcript = Blake2bWrite::<_, _, Challenge255<G1Affine>>::init(vec![]);

    create_proof::<KZGCommitmentScheme<Bls12>, ProverGWC<Bls12>, _, _, _, _>(
        &params,
        &pk,
        &[circuit],
        &[&[]],
        rng,
        &mut transcript,
    ).expect("Proof generation failed");

    let proof = transcript.finalize();

    let verifier = SingleStrategy::new(&params);
    let mut transcript_verifier = Blake2bRead::<_, _, Challenge255<G1Affine>>::init(proof.as_slice());
    
    verify_proof::<_, VerifierGWC<Bls12>, _, _, _>(
        &params,
        &pk.get_vk(),
        verifier,
        &[&[]],
        &mut transcript_verifier
    ).expect("Verification failed");

    // FROM THIS POINT WE MIMIC THE VERIFIER STEP BY STEP WITHOUT GENERIC CODE
    // SO IT IS SPECIFIED TO ONLY THIS EXAMPLE!

    // first  we initialize a transcript to store the proof.
    let mut transcript = Blake2bRead::<_, _, Challenge255<G1Affine>>::init(proof.as_slice());

    let vk = pk.get_vk();
    // Add verification key hash to transcript
    vk.hash_into(&mut transcript).expect("Failed to hash into");

    // We have two advice commitments
    let advice_commitments = (0..2)
        .map(|_| transcript.read_point().unwrap())
        .collect::<Vec<_>>();
    // println!("advice_commitments: {:?}", advice_commitments);

    // Sample theta challenge for keeping lookup columns linearly independent
    // Even if we don't have lookups, we need to keep this in order to be consistent with the transcript
    let _theta = transcript.squeeze_challenge_scalar::<()>();
    // println!("theta: {:?}", _theta);

    // Sample beta challenge
    let beta = transcript.squeeze_challenge_scalar::<()>();
    // println!("beta: {:?}", beta);

    // Sample gamma challenge
    let gamma = transcript.squeeze_challenge_scalar::<()>();
    // println!("gamma: {:?}", gamma);

    // We should have three permutations commitments
    let permutations_committed = (0..3)
        .map(|_| transcript.read_point().expect("aha"))
        .collect::<Vec<_>>();
    // println!("permutations_committed: {:?}", permutations_committed);

    // Now we read the commitment of a randomly sampled polynomial (step 3 of protocol)
    let vanishing_rand = transcript.read_point().unwrap();

    // Sample y challenge, which keeps the gates linearly independent.
    let y = transcript.squeeze_challenge_scalar::<()>();
    // println!("y: {:?}", y);

    // Now we get the commitments of the split H polynomial, which is split in two parts
    // TODO: Wait, why is this split only in two :thinking-face:
    let vanishing_split = (0..2)
        .map(|_| transcript.read_point().expect("Failed here"))
        .collect::<Vec<_>>();

    // Sample x challenge, which is used to ensure the circuit is
    // satisfied with high probability.
    let x = transcript.squeeze_challenge_scalar::<()>();
    // println!("x: {:?}", x);

    // We don't have instance evals
    let _instance_evals = (0..0).map(|_| transcript.read_scalar().unwrap())
        .collect::<Vec<_>>();

    // We have three evaluation of advice columns. 1 for each advice, and one for the next of the first advice
    let advice_evals = (0..3)
        .map(|_| transcript.read_scalar().unwrap())
        .collect::<Vec<_>>();
    
    // We have two evaluations of fixed evals. One for our fixed value and another one for the selector
    let fixed_evals = (0..2)
        .map(|_| transcript.read_scalar().unwrap())
        .collect::<Vec<_>>();

    // Random point to prove correctness of the random commitment of the vanishing polynomial
    let random_eval = transcript.read_scalar().expect("aha");

    // Evaluations of the permutations polynomials. We get three scalars.
    let permutations_common_evals = (0..3)
        .map(|_| transcript.read_scalar().unwrap())
        .collect::<Vec<_>>();
    // println!("permutations_common_evals: {:?}", permutations_common_evals);

        // Now we need the evaluations used to validate the permutation argument, meaning evaluations at the
    // current and next powers of omega, and for all except the last, to the last power of omega.
    // We build three tuples for each split of the polynomial
    let permutations_evaluated_a = (
        permutations_committed[0],
        transcript.read_scalar().unwrap(),
        transcript.read_scalar().unwrap(),
        transcript.read_scalar().unwrap(),
    );
    let permutations_evaluated_b = (
        permutations_committed[1],
        transcript.read_scalar().unwrap(),
        transcript.read_scalar().unwrap(),
        transcript.read_scalar().unwrap(),
    );
    // We don't need the evaluation of the last power of omega for the last one.
    let permutations_evaluated_c = (
        permutations_committed[2],
        transcript.read_scalar().unwrap(),
        transcript.read_scalar().unwrap(),
    );

    // This check ensures the circuit is satisfied so long as the polynomial
    // commitments open to the correct values.
    let vanishing = {
        // x^n
        let xn = x.pow(&[params.n() as u64, 0, 0, 0]);

        let blinding_factors = vk.cs.blinding_factors();
        let l_evals = vk
            .get_domain()
            .l_i_range(*x, xn, (-((blinding_factors + 1) as i32))..=0);
        assert_eq!(l_evals.len(), 2 + blinding_factors);
        let l_last = l_evals[0];
        let l_blind: Scalar = l_evals[1..(1 + blinding_factors)]
            .iter()
            .fold(Scalar::ZERO, |acc, eval| acc + eval);
        let l_0 = l_evals[1 + blinding_factors];

        // (1 - (l_last(X) + l_blind(X))) * (
        //   z_i(\omega X) \prod (p(X) + \beta s_i(X) + \gamma)
        // - z_i(X) \prod (p(X) + \delta^i \beta X + \gamma)
        // )
        let last_permutation_constraint = |col:Scalar, col_eval:Scalar, perm_eval, left: &mut Scalar, delta_power: u64| {
            *left *= &(col + &(*beta * col_eval) + &*gamma);

            let mut right = perm_eval;

            let current_delta =
                *beta * *x * &(Scalar::DELTA
                    .pow_vartime(&[delta_power, 0, 0 ,0])); // chunk_len = 1
            right *= &(col + &current_delta + &*gamma);

            (*left - &right) * (Scalar::ONE - &(l_last + &l_blind))
        };

        // Compute the expected value of h(x)
        let expressions = {
            let fixed_evals = &fixed_evals;
            let advice_evals = &advice_evals;
            let _instance_evals = &_instance_evals; // No instance values in our example

            // We have only one gate, which we evaluate directly.
            // We have two evaluations of fixed columns, one for the fixed column (which we don't use
            // in the gate) and one for the selector (which we use here),
            iter::once(fixed_evals[1] * (advice_evals[0] * advice_evals[1] - advice_evals[2]))
                // Now we work on the permutation argument
                // Enforce only for the first set.
                // l_0(X) * (1 - z_0(X)) = 0
                // CP1 in notes
                .chain(iter::once(l_0 * &(Scalar::ONE - &permutations_evaluated_a.1)))
                // Next we enforce only for the last set.
                // l_last(X) * (z_l(X)^2 - z_l(X)) = 0
                // CP2 in notes
                .chain(iter::once(
                    &l_last * &(permutations_evaluated_c.1.square() - &permutations_evaluated_c.1),
                ))
                // Except for the first set, enforce.
                // l_0(X) * (z_i(X) - z_{i-1}(\omega^(last) X)) = 0
                // CP3 and CP4 in notes
                .chain(iter::once((permutations_evaluated_b.1 - permutations_evaluated_a.3) * &l_0))
                .chain(iter::once((permutations_evaluated_c.1 - permutations_evaluated_b.3) * &l_0))
                // And for all the sets we enforce:
                // (1 - (l_last(X) + l_blind(X))) * (
                //   z_i(\omega X) \prod (p(X) + \beta s_i(X) + \gamma)
                // - z_i(X) \prod (p(X) + \delta^i \beta X + \gamma)
                // )
                //
                // The order of our columns in the permutation argument is:
                // 1. Fixed column CP7 in notes
                // 2. Advice column CP5 in notes
                // 3. Advice column CP6 in notes
                .chain(iter::once({
                    let mut left = permutations_evaluated_a.2;
                    last_permutation_constraint(fixed_evals[0], permutations_common_evals[0], permutations_evaluated_a.1, &mut left, 0)
                }))
                .chain(iter::once({
                    let mut left = permutations_evaluated_b.2;
                    last_permutation_constraint(advice_evals[0], permutations_common_evals[1], permutations_evaluated_b.1, &mut left, 1)
                }))
                .chain(iter::once({
                    let mut left = permutations_evaluated_c.2;
                    last_permutation_constraint(advice_evals[1], permutations_common_evals[2], permutations_evaluated_c.1, &mut left, 2)
                }))
        };

        // Now we compute the vanishing polynomial expected evaluation
        let expected_h_eval = expressions.fold(Scalar::ZERO, |h_eval, v| h_eval * &*y + &v);
        let expected_h_eval = expected_h_eval * ((xn - Scalar::ONE).invert().unwrap());
        // println!("expected_h_eval: {:?}", expected_h_eval);

        // and its commitment
        let h_commitment = vanishing_split
            .iter()
            .rev()
            .fold(G1Projective::identity().to_affine(), |mut acc, commitment| {
                acc = (acc * xn).to_affine();
                acc = (acc + *commitment).to_affine();
                acc
            });

        (h_commitment, expected_h_eval)
    };
    // println!("vanishing: {:?}", vanishing);

    let blinding_factors = vk.cs.blinding_factors();
    let x_next = vk.get_domain().rotate_omega(*x, Rotation::next());
    let x_last = vk.get_domain().rotate_omega(*x, Rotation(-((blinding_factors + 1) as i32)));

    let queries = {
        iter::empty()
            .chain(vk.cs.advice_queries().iter().enumerate().map(
                move |(query_index, &(column, at))| MinimalVerifierQuery {
                    point: vk.get_domain().rotate_omega(*x, at),
                    commitment: advice_commitments[column.index()],
                    eval: advice_evals[query_index],
                },
            ))
            // Open permutation product commitments at x and \omega x
            .chain(Some(MinimalVerifierQuery {
                point: *x,
                commitment: permutations_evaluated_a.0,
                eval: permutations_evaluated_a.1,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: x_next,
                commitment: permutations_evaluated_a.0,
                eval: permutations_evaluated_a.2,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: *x,
                commitment: permutations_evaluated_b.0,
                eval: permutations_evaluated_b.1,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: x_next,
                commitment: permutations_evaluated_b.0,
                eval: permutations_evaluated_b.2,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: *x,
                commitment: permutations_evaluated_c.0,
                eval: permutations_evaluated_c.1,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: x_next,
                commitment: permutations_evaluated_c.0,
                eval: permutations_evaluated_c.2,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: x_last,
                commitment: permutations_evaluated_b.0,
                eval: permutations_evaluated_b.3,
            }))
            .chain(Some(MinimalVerifierQuery {
                point: x_last,
                commitment: permutations_evaluated_a.0,
                eval: permutations_evaluated_a.3,
            }))
    }
        .chain(
            vk.cs
                .fixed_queries()
                .iter()
                .enumerate()
                .map(|(query_index, &(column, at))| MinimalVerifierQuery {
                    point: vk.get_domain().rotate_omega(*x, at),
                    commitment: vk.fixed_commitments()[column.index()],
                    eval: fixed_evals[query_index],
                }),
        )
        .chain(vk.permutation().commitments()
            .iter()
            .zip(permutations_common_evals.iter())
            .map(move |(commitment, &eval)| MinimalVerifierQuery {
                point: *x,
                commitment: *commitment,
                eval,
            }))
        .chain(Some(MinimalVerifierQuery {
            point: *x,
            commitment: vanishing.0.clone(),
            eval: vanishing.1,
        }))
        .chain(Some(MinimalVerifierQuery {
            point: *x,
            commitment: vanishing_rand,
            eval: random_eval,
        })).collect::<Vec<_>>();
    // println!("queries: {:?}", queries);

    let v  = transcript.squeeze_challenge_scalar::<()>().inner;
    // println!("v: {:?}", v);

    let mut point_query_map: Vec<(Scalar, Vec<_>)> = Vec::new();
    for query in queries {
        if let Some(pos) = point_query_map
            .iter()
            .position(|(point, _)| *point == query.get_point())
        {
            let (_, queries) = &mut point_query_map[pos];
            queries.push(query);
        } else {
            point_query_map.push((query.get_point(), vec![query]));
        }
    }

    let commitment_data = point_query_map
    .into_iter()
    .map(|(point, queries)| CommitmentData {
        queries,
        point,
        _marker: PhantomData,
    })
    .collect::<Vec<_>>();
    // println!("commitment_data: {:?}", commitment_data);
    
    let w = (0..3)
        .map(|_| transcript.read_point().unwrap())
        .collect::<Vec<_>>();
    // println!("w: {:?}", w);
    
    let w_clone = w.clone();

    let u = transcript.squeeze_challenge_scalar::<()>().inner;

    let mut commitment_multi = MSMKZG::<Bls12>::new();
    let mut eval_multi = Scalar::ZERO;

    let mut witness = MSMKZG::<Bls12>::new();
    let mut witness_with_aux = MSMKZG::<Bls12>::new();

    for ((commitment_at_a_point, wi), power_of_u) in
        commitment_data.iter().zip(w.into_iter()).zip(powers(u))
    {
        assert!(!commitment_at_a_point.queries.is_empty());
        let z = commitment_at_a_point.point;

        let (mut commitment_batch, eval_batch) = commitment_at_a_point
                .queries
                .iter()
                .zip(powers(v))
                .map(|(query, power_of_v)| {
                    assert_eq!(query.get_point(), z);

                    let mut msm = MSMKZG::<Bls12>::new();
                    let commitment = {
                                msm.append_term(power_of_v, query.commitment.into());
                                msm
                    };
                    let eval = power_of_v * query.get_eval();

                    (commitment, eval)
                })
                .reduce(|(mut commitment_acc, eval_acc), (commitment, eval)| {
                    commitment_acc.add_msm(&commitment);
                    (commitment_acc, eval_acc + eval)
                })
                .unwrap();

        commitment_batch.scale(power_of_u);
        commitment_multi.add_msm(&commitment_batch);
        eval_multi += power_of_u * eval_batch;
    
        witness_with_aux.append_term(power_of_u * z, wi.into());
        witness.append_term(power_of_u, wi.into());
    }

    let verifier2 = SingleStrategy::new(&params);
    let mut msm_accumulator = verifier2.msm;

    msm_accumulator.left.add_msm(&witness);

    msm_accumulator.right.add_msm(&witness_with_aux);
    msm_accumulator.right.add_msm(&commitment_multi);
    let g0:G1Projective = params.g[0].into();
    msm_accumulator.right.append_term(eval_multi, -g0);

    let final_verify = msm_accumulator.check();

    println!("Final pairing check: {:?}", final_verify);
    println!("Passed");
}

