#![allow(unused_variables)]
#![allow(unused_imports)]
#![allow(dead_code)]
use core::num;

use halo2_proofs::plonk::{Advice, vanishing, Circuit, Column, ConstraintSystem, create_proof, Error, Fixed, keygen_pk, keygen_vk, verify_proof};
use halo2_proofs::halo2curves::bls12_381::{Bls12, G1Affine, Scalar};
use halo2_proofs::halo2curves::ff::Field;
use halo2_proofs::circuit::{AssignedCell, Layouter, SimpleFloorPlanner, Value};
// use halo2_proofs::dev::MockProver;
use halo2_proofs::poly::commitment::Verifier;
use halo2_proofs::poly::kzg::strategy::SingleStrategy;
use halo2_proofs::poly::kzg::commitment::{KZGCommitmentScheme, ParamsKZG};
use halo2_proofs::poly::kzg::multiopen::{ProverGWC, VerifierGWC};
use halo2_proofs::poly::Rotation;
use halo2_proofs::transcript::{Blake2bRead, Blake2bWrite, Challenge255, TranscriptReadBuffer, TranscriptWriterBuffer, TranscriptRead};
use halo2_proofs::transcript::Transcript;
use halo2_proofs::poly::commitment::Params;
use rand::{Rng, SeedableRng};
use rand::rngs::StdRng;

trait NumericInstructions<F: Field>: Chip<F> {
    /// Variable representing a number.
    type Num;

    /// Loads a number into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> Result<Self::Num, Error>;

    /// Loads a number into the circuit as a fixed constant.
    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> Result<Self::Num, Error>;

    /// Returns `c = a * b`.
    fn mul(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error>;
}

/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct FieldChip<F: Field> {
    config: FieldConfig,
    _marker: PhantomData<F>,
}

/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
struct FieldConfig {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>; 2],

    // We need a selector to enable the multiplication gate, so that we aren't placing
    // any constraints on cells where `NumericInstructions::mul` is not being used.
    // This is important when building larger circuits, where columns are used by
    // multiple sets of instructions.
    s_mul: Selector,
}

impl<F: Field> FieldChip<F> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>; 2],
        constant: Column<Fixed>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_constant(constant);
        for column in &advice {
            meta.enable_equality(*column);
        }
        let s_mul = meta.selector();

        // Define our multiplication gate!
        meta.create_gate("mul", |meta| {
            // To implement multiplication, we need three advice cells and a selector
            // cell. We arrange them like so:
            //
            // | a0  | a1  | s_mul |
            // |-----|-----|-------|
            // | lhs | rhs | s_mul |
            // | out |     |       |
            //
            // Gates may refer to any relative offsets we want, but each distinct
            // offset adds a cost to the proof. The most common offsets are 0 (the
            // current row), 1 (the next row), and -1 (the previous row), for which
            // `Rotation` has specific constructors.
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let s_mul = meta.query_selector(s_mul);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            // has the following properties:
            // - When s_mul = 0, any value is allowed in lhs, rhs, and out.
            // - When s_mul != 0, this constrains lhs * rhs = out.
            vec![s_mul * (lhs * rhs - out)]
        });

        FieldConfig { advice, s_mul }
    }
}

impl<F: Field> Chip<F> for FieldChip<F> {
    type Config = FieldConfig;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}

/// A variable representing a number.
#[derive(Clone)]
struct Number<F: Field>(AssignedCell<F, F>);

impl<F: Field> NumericInstructions<F> for FieldChip<F> {
    type Num = Number<F>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Value<F>,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(|| "private input", config.advice[0], 0, || value)
                    .map(Number)
            },
        )
    }

    fn load_constant(
        &self,
        mut layouter: impl Layouter<F>,
        constant: F,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load constant",
            |mut region| {
                region
                    .assign_advice_from_constant(|| "constant value", config.advice[0], 0, constant)
                    .map(Number)
            },
        )
    }

    fn mul(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "mul",
            |mut region: Region<'_, F>| {
                // We only want to use a single multiplication gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_mul.enable(&mut region, 0)?;

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                a.0.copy_advice(|| "lhs", &mut region, config.advice[0], 0)?;
                b.0.copy_advice(|| "rhs", &mut region, config.advice[1], 0)?;

                // Now we can assign the multiplication result, which is to be assigned
                // into the output position.
                let value = a.0.value().copied() * b.0.value();

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                region
                    .assign_advice(|| "lhs * rhs", config.advice[0], 1, || value)
                    .map(Number)
            },
        )
    }
}

/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Default)]
struct MyCircuit<F: Field> {
    constant: F,
    a: Value<F>,
    b: Value<F>,
    c: Value<F>,
}

impl<F: Field> Circuit<F> for MyCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = FieldConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FieldChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // Create a fixed column to load constants.
        let constant = meta.fixed_column();

        FieldChip::configure(meta, advice, constant)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let field_chip = FieldChip::<F>::construct(config);

        // Load our private values into the circuit.
        let a = field_chip.load_private(layouter.namespace(|| "load a"), self.a)?;
        let b = field_chip.load_private(layouter.namespace(|| "load b"), self.b)?;
        let c = field_chip.load_private(layouter.namespace(|| "load c"), self.c)?;

        // Load the constant factor into the circuit.
        let constant =
            field_chip.load_constant(layouter.namespace(|| "load constant"), self.constant)?;

        // We only have access to plain multiplication.
        // We could implement our circuit as:
        //     asq  = a*a
        //     bsq  = b*b
        //     absq = asq*bsq
        //     c    = constant*asq*bsq
        //
        // but it's more efficient to implement it as:
        //     ab   = a*b
        //     absq = ab^2
        //     c    = constant*absq
        let ab = field_chip.mul(layouter.namespace(|| "a * b"), a, b)?;
        let absq = field_chip.mul(layouter.namespace(|| "ab * ab"), ab.clone(), ab)?;
        let c_out = field_chip.mul(layouter.namespace(|| "constant * absq"), constant, absq)?;

        layouter.assign_region(
            || "Assert equality",
            |mut region| region.constrain_equal(c_out.0.cell(), c.0.cell()),
        )
    }
}

fn main() {
    // The number of rows in our circuit cannot exceed 2^k. Since our example
    // circuit is very small, we can pick a very small value here.
    let k = 4;

    // Prepare the private and public inputs to the circuit!
    let constant = Fp::from(7);
    let a = Fp::from(2);
    let b = Fp::from(3);
    let c = constant * a.square() * b.square();

    // Instantiate the circuit with the private inputs.
    let circuit = MyCircuit {
        constant,
        a: Value::known(a),
        b: Value::known(b),
        c: Value::known(c),
    };
    
    let seed = [0u8; 32];  // Choose a fixed seed for testing
    let mut rng: StdRng = SeedableRng::from_seed(seed);

    // Given the correct public input, our circuit will verify.
    let params: ParamsKZG<Bls12> = ParamsKZG::setup(k, &mut rng);
    let vk = keygen_vk(&params, &circuit).expect("keygen_vk should not fail");
    let pk = keygen_pk(&params, vk, &circuit).expect("keygen_pk should not fail");

    let mut transcript = Blake2bWrite::<_, _, Challenge255<G1Affine>>::init(vec![]);

    create_proof(&params, &pk, &[circuit], &[&[]], rng, &mut transcript)
        .expect("proof generation should not fail");

    let proof = transcript.finalize();
    // println!("Proof: {:?}", proof);

    let mut transcript = Blake2bRead::<_, _, Challenge255<G1Affine>>::init(proof.as_slice());
    // println!("Transcript2: {:?}", transcript2);

    let verify = minimal_verify_proof(&params, pk.get_vk(), &[&[]], &mut transcript);
    verify.unwrap();
    // assert!(verify.is_ok()); 

    // mimic the verifier from this point

    // // let proof = [].to_vec();
    // let mut transcript3 = Blake2bRead::<_, _, Challenge255<G1Affine>>::init(proof.as_slice());

    // // println!("Transcript3: {:?}", transcript3);

    // // // add verifiers key hash to hash buffer
    // pk.get_vk().hash_into(&mut transcript3).expect("Failed to hash into");

    // // add first three point to hash buffer and remove from transcript
    // let advice_commitments: Vec<G1Affine> = (0..3)
    //     .map(|_| transcript3.read_point().expect("Failed to read point"))
    //     .collect();
    // // println!("advice_commitments1: {:?}", advice_commitments);

    // let challenges: Vec<G1Affine> = [].to_vec();
    // // println!("challenges: {:?}", challenges);

    // let theta = transcript3.squeeze_challenge_scalar::<()>();
    // println!("theta1: {:?}", theta);

    // let lookups_permuted: Vec<Vec<G1Affine>> = [[].to_vec()].to_vec();
    // // println!("lookups_permuted: {:?}", lookups_permuted);

    // let beta = transcript3.squeeze_challenge_scalar::<()>();
    // // println!("beta1: {:?}", beta);

    // let gamma = transcript3.squeeze_challenge_scalar::<()>();
    // // println!("gamma1: {:?}", gamma);

    // let permutations_committed = transcript3.read_point().expect("Failed to read point");
    // // println!("permutations_committed1: {:?}", permutations_committed);

    // let lookups_committed: Vec<Vec<G1Affine>> = [[].to_vec()].to_vec();
    // // println!("lookups_committed1: {:?}", lookups_committed);

    // // this is part of vanishing object
    // let random_poly_commitment = transcript3.read_point().expect("Failed to read point");
    // // println!("random_poly_commitment: {:?}", random_poly_commitment);
    
    // let y = transcript3.squeeze_challenge_scalar::<()>();
    // // println!("y1: {:?}", y);

    // // this is part of vanishing object
    // let h_commitments: Vec<G1Affine> = (0..2)
    //     .map(|_| transcript3.read_point().expect("Failed to read point"))
    //     .collect();
    // // println!("h_commitments1: {:?}", h_commitments);

    // let x = transcript3.squeeze_challenge_scalar::<()>();
    // // println!("x1: {:?}", x);

    // let xn = x.pow(&[params.n() as u64, 0, 0, 0]);
    // // println!("xn1: {:?}", xn);

    // let min_rotation: i32 = 0;
    // let max_rotation: i32 = 0;
    // let max_instance_len: i32 = 0;

    // // there are no public inputs (instances), so it makes sense that this is []
    // let l_i_s = pk.get_vk().get_domain().l_i_range(
    //     *x,
    //     xn,
    //     -max_rotation..max_instance_len as i32 + min_rotation.abs());
    
    // let instances: Vec<Vec<Scalar>> = [[].to_vec()].to_vec();
    // // println!("instances1: {:?}", instances);

    // let advice_evals = (0..3)
    //     .map(|_| transcript3.read_scalar().expect(""))
    //     .collect::<Vec<_>>();
    // // println!("advice_evals1: {:?}", advice_evals);

    // let fixed_evals = (0..4)
    //     .map(|_| transcript3.read_scalar().expect(""))
    //     .collect::<Vec<_>>();
    // // println!("fixed_evals1: {:?}", fixed_evals);
    
    // // part of vanishing object
    // let random_eval : Scalar = transcript3.read_scalar().expect("");
    // // println!("random_eval1: {:?}", random_eval);

    // // this is contained in the permutatuins_common object
    // let permutation_evals = (0..1)
    //     .map(|_| transcript3.read_scalar().expect(""))
    //     .collect::<Vec<_>>();
    // // println!("permutation_evals1: {:?}", permutation_evals);

    // // note that the permuatuins_evaluated objectet also has the commited G1 point 
    // // for the permutation
    // let permutation_product_eval = transcript3.read_scalar().expect("");
    // // println!("permutation_product_eval1: {:?}", permutation_product_eval);

    // let permutation_product_next_eval = transcript3.read_scalar().expect("");
    // // println!("permutation_product_next_eval1: {:?}", permutation_product_next_eval);

    // let lookups_evaluated: Vec<Vec<Scalar>> = [[].to_vec()].to_vec();
    // // println!("lookups_evaluated1: {:?}", lookups_evaluated);

    // // TODO: Understand construction of queries and below link with pairing check

    // let blinding_factors = pk.get_vk().cs.blinding_factors();
    // let l_evals = pk.get_vk().get_domain().l_i_range(*x, xn, (-((blinding_factors + 1) as i32))..=0);
    // // println!("l_evals: {:?}", l_evals);
    // let l_last = l_evals.last().expect("must have at least one element");
    // let l_blind = l_evals[1..(1+blinding_factors)]
    //     .iter()
    //     .fold(Scalar::ZERO, |acc, eval| acc + eval);
    // let l_0 = l_evals[1 + blinding_factors];
    
    // // // this is inside the gwc verifier https://github.com/perturbing/halo2/blob/main/halo2_proofs/src/poly/kzg/multiopen/gwc/verifier.rs
    // // let v = transcript3.squeeze_challenge_scalar::<()>();
    // // // println!("v1: {:?}", v);

    // // let w: Vec<G1Affine> = (0..2)
    // //     .map(|_| transcript3.read_point().expect(""))
    // //     .collect::<Vec<_>>();
    // // // println!("w1: {:?}", w);

    // // let u = transcript3.squeeze_challenge_scalar::<()>();
    // // // println!("u1: {:?}", u);
    
    println!("Passed");
}

    // let permutations_common_non_evaluated  = pk.get_vk().permutation();
    // println!("permutations_common_non_evaluated: {:?}", permutations_common_non_evaluated);